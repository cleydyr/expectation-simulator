{"version":3,"sources":["InputErrorFeedback.js","functions/bernoulli.js","functions/hypergeometric.js","HypergeometricForm.js","functions/average.js","functions/binomial.js","BinomialForm.js","functions/geometric.js","GeometricForm.js","functions/negative_binomial.js","NegativeBinomialForm.js","index.js"],"names":["FieldErrorFeedback","show","message","react_default","a","createElement","form_lib_default","FeedbackGroup","FeedbackItem","FeedbackIndicator","spritemap","symbol","bernoulli","p","Math","random","Hypergeometric","constructor","successes","failures","sampleSize","this","trial","trials","Array","reduce","s","f","success","mean","gen","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","HyperGeometricForm","stateFn","_useState","useState","_useState2","Object","slicedToArray","state","setState","processEvent","event","objectSpread2","[object Object]","target","id","value","Number","allGood","useEffect","HyperGeometric","Group","className","htmlFor","form_lib","placeholder","type","onChange","min","InputErrorFeedback","max","formName","average","data","simulations","acc","cur","i","Binomial","map","__","BinomialForm","setP","_useState3","_useState4","setSampleSize","step","Geometric","GeometricForm","NegativeBinomial","r","NegativeBinomialForm","setSuccesses","distributions","App","React","Component","super","simulate","_this$state","rv_generator","rv","loading","filledData","v","changeParameters","changeDistribution","index","distributionIndex","DEFAULT_SIMULATIONS","render","_this$state2","form","tabs_lib_default","modern","distribution","Item","key","active","innerProps","aria-controls","onClick","lib_default","resetFields","displayType","Fragment","charts_lib_default","columns","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.299a2a5b.chunk.js","sourcesContent":["import React from 'react';\n\nimport ClayForm from \"@clayui/form\";\n\nimport spritemap from '@clayui/css/lib/images/icons/icons.svg';\n\nconst FieldErrorFeedback = ({show, message}) =>\n    show &&\n    (\n        <ClayForm.FeedbackGroup>\n            <ClayForm.FeedbackItem>\n            <ClayForm.FeedbackIndicator\n                spritemap={spritemap}\n                symbol=\"exclamation-full\"\n            />\n            {message}\n            </ClayForm.FeedbackItem>\n        </ClayForm.FeedbackGroup>\n    );\n\nexport default FieldErrorFeedback;","export default function bernoulli(p) {\n  return Math.random() < p;\n}\n","import bernoulli from \"./bernoulli\";\n\nexport default class Hypergeometric {\n  constructor(successes, failures, sampleSize) {\n    this.successes = successes;\n    this.failures = failures;\n    this.sampleSize = sampleSize;\n  }  \n\n  trial = () => {\n    const trials = [...(new Array(this.sampleSize))]\n      .reduce(({s, f}) => {\n        const success = bernoulli(s/(s + f));\n\n        return {\n          s: s - success,\n          f: f - !success,\n        };\n      }, {s: this.successes, f: this.failures});\n\n    return this.successes - trials.s;\n  }\n\n  mean = () => this.sampleSize*this.successes/(this.successes + this.failures);\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport InputErrorFeedback from \"./InputErrorFeedback\";\nimport HyperGeometric from \"./functions/hypergeometric\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_FAILURES = 50;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst HyperGeometricForm = ({stateFn}) => {\n  const [state, setState] = useState({\n    successes: DEFAULT_SUCCESSES,\n    failures: DEFAULT_FAILURES,\n    sampleSize: DEFAULT_SAMPLE_SIZE,\n  });\n\n  const processEvent = event => setState({\n    ...state,\n    [event.target.id]: !event.target.value || Number(event.target.value),\n  });\n\n  const allGood = ({successes, failures, sampleSize}) => {\n    return sampleSize < successes + failures &&\n      successes >= 0 && failures >= 0;\n  }\n\n  useEffect(() => {\n    const {\n      successes,\n      failures,\n      sampleSize,\n    } = state;\n\n    if (allGood(state)) {\n      stateFn(new HyperGeometric(successes, failures, sampleSize));\n    }\n  }, [state]);\n\n  const {\n    successes,\n    failures,\n    sampleSize,\n  } = state;\n\n  return (\n    <ClayForm.Group className={ !allGood(state) && \"has-error\"}>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes here\"\n        type=\"number\"\n        onChange={processEvent}\n        value={successes}\n        min={0}\n      />\n      <InputErrorFeedback\n        show={successes < 0}\n        message=\"Successes can't be negative\"\n      />\n      <label htmlFor=\"failures\">Failures</label>\n      <ClayInput\n        id=\"failures\"\n        placeholder=\"Insert the number of failures here\"\n        type=\"number\"\n        onChange={processEvent}\n        value={failures}\n        min={0}\n      />\n      <InputErrorFeedback\n        show={failures < 0}\n        message=\"Failures can't be negative\"\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent}\n        value={sampleSize}\n        max={successes + failures}\n        min={0}\n      />\n      <InputErrorFeedback\n        show={successes > 0 && failures > 0 && sampleSize > successes + failures}\n        message=\"Sample size can't be more than the sum of successes and failures!\"\n      />\n    </ClayForm.Group>\n  );\n};\n\nHyperGeometricForm.formName = 'Hypergeometric';\n\nexport default HyperGeometricForm;\n","export default function average(data, simulations) {\n    return data.reduce((acc, cur, i) => {\n        return acc + i*cur/simulations;\n    }, 0);\n}","import bernoulli from \"./bernoulli\";\n\nexport default class Binomial {\n  constructor(p, sampleSize) {\n    this.p = p;\n    this.sampleSize = sampleSize;\n  }\n\n  trial = () => {\n    return [...(new Array(this.sampleSize))]\n        .map(__ => bernoulli(this.p))\n        .reduce((acc, cur) => acc + cur, 0);\n  }\n\n  mean = () => this.sampleSize*this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport Binomial from \"./functions/binomial\";\n\nimport InputErrorFeedback from \"./InputErrorFeedback\";\n\nconst DEFAULT_P = 0.5;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst BinomialForm = ({stateFn}) => {\n  const [p, setP] = useState(DEFAULT_P);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  const allGood = () => p >= 0 && p <= 1 && sampleSize >= 0;\n\n  useEffect(() => {\n    if (allGood()) {\n      stateFn(new Binomial(p, sampleSize));\n    }\n  }, [p, sampleSize,]);\n\n  return (\n    <ClayForm.Group className={ !allGood() && \"has-error\"}>\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n        max={1}\n        min={0}\n      />\n      <InputErrorFeedback\n        show={p < 0 || p > 1}\n        message=\"The value of p must be between 0 and 1!\"\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n      <InputErrorFeedback\n        show={sampleSize < 0}\n        message=\"Sample size can't be negative!\"\n      />\n    </ClayForm.Group>\n  );\n};\n\nBinomialForm.formName = 'Binomial';\n\nexport default BinomialForm;\n","import bernoulli from \"./bernoulli\";\n\nexport default class Geometric {\n  constructor(p) {\n    this.p = p;\n  }  \n\n  trial = () => {\n    var failures = 0;\n\n    while (!bernoulli(this.p)) {\n        failures++;\n    }\n\n    return failures;\n  }\n\n  mean = () => (1 - this.p)/this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport InputErrorFeedback from \"./InputErrorFeedback\";\nimport Geometric from \"./functions/geometric\";\n\nconst DEFAULT_P = 0.5;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst GeometricForm = ({stateFn}) => {\n  const [p, setP] = useState(DEFAULT_P);\n\n  useEffect(() => {\n    if (p > 0 && p < 1) {\n      stateFn(new Geometric(p));\n    }\n  }, [p, ]);\n\n  return (\n    <ClayForm.Group className={ (p <= 0 || p > 1) && \"has-error\"}>\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n        min={0}\n        max={1}\n      />\n      <InputErrorFeedback\n        show={p <= 0 || p > 1}\n        message=\"The value of p must be between 0 (exclusive) and 1!\"\n      />\n    </ClayForm.Group>\n  );\n};\n\nGeometricForm.formName = 'Geometric';\n\nexport default GeometricForm;\n","import bernoulli from \"./bernoulli\";\n\nexport default class NegativeBinomial {\n  constructor(r, p) {\n    this.r = r;\n    this.p = p;\n  }  \n\n  trial = () => {\n    let f = 0;\n    let s = 0;\n\n    while (s < this.r) {\n        if (bernoulli(this.p)) {\n            s++;\n        }\n        else {\n            f++;\n        }\n    }\n\n    return f;\n  }\n\n  mean = () => this.r*(1 - this.p)/this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport InputErrorFeedback from \"./InputErrorFeedback\";\nimport NegativeBinomial from \"./functions/negative_binomial\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_P = 0.5;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst NegativeBinomialForm = ({stateFn}) => {\n  const [successes, setSuccesses] = useState(DEFAULT_SUCCESSES);\n  const [p, setP] = useState(DEFAULT_P);\n\n  const allGood = (p, successes) => p > 0 && p < 1 && successes > 0;\n\n  useEffect(() => {\n    if (allGood(p, successes)) {\n      stateFn(new NegativeBinomial(successes, p));\n    }\n  }, [successes, p,]);\n\n  return (\n    <ClayForm.Group className={ !allGood(p, successes) && \"has-error\"}>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes until stopping the trials here\"\n        type=\"number\"\n        onChange={processEvent(setSuccesses)}\n        value={successes}\n        min={1}\n      />\n      <InputErrorFeedback\n        show={successes <= 0}\n        message=\"The number of successes must be positive!\"\n      />\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n        max={1}\n        min={0}\n      />\n      <InputErrorFeedback\n        show={p <= 0 || p > 1}\n        message=\"The value of p must be between 0 (exclusive) and 1!\"\n      />\n    </ClayForm.Group>\n  );\n};\n\nNegativeBinomialForm.formName = 'Negative Binomial';\n\nexport default NegativeBinomialForm;\n","import ClayButton from \"@clayui/button\";\nimport ClayChart from \"@clayui/charts\";\nimport { ClayInput } from \"@clayui/form\";\nimport ClayTabs from '@clayui/tabs';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Imports the @clayui/css package CSS\nimport \"@clayui/css/lib/css/atlas.css\";\n\nimport HyperGeometricForm from \"./HypergeometricForm\";\nimport average from \"./functions/average\";\nimport BinomialForm from \"./BinomialForm\";\nimport GeometricForm from \"./GeometricForm\";\nimport NegativeBinomialForm from \"./NegativeBinomialForm\";\n\nconst distributions = [\n  HyperGeometricForm,\n  BinomialForm,\n  GeometricForm,\n  NegativeBinomialForm,\n];\n\nclass App extends React.Component {\n  static DEFAULT_SIMULATIONS = 1000;\n\n  constructor() {\n    super();\n\n    this.state = {\n      simulations: App.DEFAULT_SIMULATIONS,\n      data: [\"count\"],\n      distributionIndex: 0,\n      loading: false,\n    };\n  }\n\n  simulate = () => {\n    const { simulations, rv } = this.state;\n\n    const rv_generator = rv.gen();\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        const experiment = [...new Array(simulations)]\n          .map(__ => rv_generator.next().value)\n          .reduce((acc, cur) => {\n            acc[cur] = (acc[cur] || 0) + 1;\n\n            return acc;\n          }, []);\n\n        const filledData = [...experiment].map(v => v || 0);\n\n        this.setState({\n          data: [\"count\", ...filledData],\n          mean: average(filledData, simulations),\n          loading: false,\n        });\n      });\n  };\n\n  changeParameters = (event) => {\n    this.setState({\n      [event.target.id]: Number(event.target.value)\n    });\n  };\n\n  changeDistribution = (index) => {\n    this.setState({\n      distributionIndex: index,\n    });\n  }\n\n  render() {\n    const {\n      distributionIndex,\n      simulations,\n      rv,\n      mean,\n      data,\n    } = this.state;\n\n    const form = distributions[distributionIndex];\n\n    return (\n      <div className=\"container\">\n        <div className=\"sheet sheet-lg\">\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Distribution</h3>\n            <ClayTabs modern>\n            {\n              distributions.map((distribution, i) =>\n                (\n                  <ClayTabs.Item\n                    key={i}\n                    active={distributionIndex === i}\n                    innerProps={{\n                      \"aria-controls\": \"tabpanel-\" + i,\n                    }}\n                    onClick={() => {this.changeDistribution(i)}}\n                  >\n                    {distribution.formName}\n                  </ClayTabs.Item>\n                )\n              )\n            }\n            </ClayTabs>\n          </div>\n          <div className=\"sheet-header\">\n            <div className=\"sheet-title\">\n              {form.formName}\n            </div>\n          </div>\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Parameters</h3>\n            {\n              React.createElement(\n                form,\n                {\n                  stateFn: (rv) => this.setState((state) => ({rv})),\n                }\n              )\n            }\n          </div>\n          <label htmlFor=\"simulations\">Number of simulations</label>\n          <ClayInput\n            id=\"simulations\"\n            placeholder=\"Insert the number of simulations here\"\n            type=\"number\"\n            onChange={this.changeParameters}\n            value={simulations}\n          />\n          <div className=\"sheet-footer\">\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.resetFields} displayType=\"secondary\">\n                Reset\n              </ClayButton>\n            </div>\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.simulate} displayType=\"primary\">\n                Simulate\n              </ClayButton>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div>\n            {\n              rv && (<span><strong>Expected value: </strong> {rv.mean()}</span>)\n            }\n          </div>\n          <div>\n            {\n              (<><strong>Simulation average: </strong> {mean}</>)\n            }\n          </div>\n          <div>\n            {\n            (\n              <ClayChart\n                data={{\n                  columns: [data],\n                  type: \"bar\"\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}