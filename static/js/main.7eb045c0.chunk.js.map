{"version":3,"sources":["functions/bernoulli.js","functions/hypergeometric.js","HypergeometricForm.js","index.js"],"names":["bernoulli","p","Math","random","Hypergeometric","constructor","successes","failures","sampleSize","this","trial","s","f","i","mean","gen","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","processEvent","event","Number","target","value","distributions","stateFn","_useState","useState","_useState2","Object","slicedToArray","setSuccesses","_useState3","_useState4","setFailures","_useState5","_useState6","setSampleSize","useEffect","HyperGeometric","react_default","createElement","form_lib_default","Group","htmlFor","form_lib","id","placeholder","type","onChange","App","React","Component","super","simulate","_this$state","state","simulations","rv","data","rv_generator","setState","objectSpread2","loading","undefined","length","average","console","log","changeParameters","[object Object]","DEFAULT_SIMULATIONS","component","render","className","lib_default","onClick","resetFields","displayType","Fragment","loading_indicator_lib_default","charts_lib_default","columns","m","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.7eb045c0.chunk.js","sourcesContent":["export default function bernoulli(p) {\n  return Math.random() < p;\n}\n","import bernoulli from \"./bernoulli\";\n\nexport default class Hypergeometric {\n  constructor(successes, failures, sampleSize) {\n    this.successes = successes;\n    this.failures = failures;\n    this.sampleSize = sampleSize;\n  }  \n\n  trial = () => {\n    var s = this.successes;\n    var f = this.failures;\n\n    for (var i = 0; i < this.sampleSize; i++) {\n      if (bernoulli(s / (s + f))) {\n        s--;\n      } else {\n        f--;\n      }\n    }\n\n    return this.successes - s;\n  }\n\n  mean = () => this.sampleSize*this.successes/(this.successes + this.failures);\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport HyperGeometric from \"./functions/hypergeometric\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_FAILURES = 50;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst HyperGeometricForm = ({stateFn}) => {\n  const [successes, setSuccesses] = useState(DEFAULT_SUCCESSES);\n  const [failures, setFailures] = useState(DEFAULT_FAILURES);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  useEffect(() => {\n    stateFn(new HyperGeometric(successes, failures, sampleSize));\n  }, [successes, failures, sampleSize,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes here\"\n        type=\"number\"\n        onChange={processEvent(setSuccesses)}\n        value={successes}\n      />\n      <label htmlFor=\"failures\">Failures</label>\n      <ClayInput\n        id=\"failures\"\n        placeholder=\"Insert the number of failures here\"\n        type=\"number\"\n        onChange={processEvent(setFailures)}\n        value={failures}\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n    </ClayForm.Group>\n  );\n};\n\nexport default HyperGeometricForm;\n","import ClayButton from \"@clayui/button\";\nimport ClayChart from \"@clayui/charts\";\nimport { ClayInput } from \"@clayui/form\";\nimport ClayLoadingIndicator from '@clayui/loading-indicator';\n\n// import ClayProgressBar from \"@clayui/progress-bar\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Imports the @clayui/css package CSS\nimport \"@clayui/css/lib/css/atlas.css\";\n\nimport HyperGeometricForm from \"./HypergeometricForm\";\n\nconst distributions = [\n  HyperGeometricForm,\n];\n\nclass App extends React.Component {\n  static DEFAULT_SIMULATIONS = 1000;\n\n  static average = (data, simulations) => {\n    let m = 0;\n\n    for (var i = 1; i < data.length; i++) {\n      m += (i - 1)*data[i]/simulations;\n    }\n\n    return m;\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      simulations: App.DEFAULT_SIMULATIONS,\n      data: [\"data\"],\n      component: distributions[0],\n      loading: false,\n    };\n  }\n\n  simulate = () => {\n    const { simulations, rv } = this.state;\n\n    const data = [\"data\"];\n\n    const rv_generator = rv.gen();\n\n    this.setState(\n      {\n        ...this.state,\n        loading: true,\n      },\n      () => {\n        for (var i = 0; i < simulations; i++) {\n          const next = rv_generator.next();\n  \n          data[next.value + 1] =\n            (data[next.value + 1] === undefined) ? 1 : (data[next.value + 1] + 1);\n        }\n  \n        for (i = 1; i < data.length; i++) {\n          data[i] = data[i] || 0;\n        }\n        \n        this.setState({\n          ...this.state,\n          data,\n          mean: App.average(data, simulations),\n          loading: false,\n        });\n      });\n\n      console.log('finish event')\n  };\n\n  changeParameters = (event) => {\n    this.setState({\n      ...this.state,\n      [event.target.id]: Number(event.target.value)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {\n          React.createElement(\n            this.state.component,\n            {\n              stateFn: (rv) => this.setState((state) => ({rv})),\n            }\n          )\n        }\n        <label htmlFor=\"simulations\">Number of simulations</label>\n        <ClayInput\n          id=\"simulations\"\n          placeholder=\"Insert the number of simulations here\"\n          type=\"number\"\n          onChange={this.changeParameters}\n          value={this.state.simulations}\n        />\n        <div className=\"sheet-footer\">\n          <div className=\"btn-group-item\">\n            <ClayButton onClick={this.resetFields} displayType=\"secondary\">\n              Reset\n            </ClayButton>\n          </div>\n          <div className=\"btn-group-item\">\n            <ClayButton onClick={this.simulate} displayType=\"primary\">\n              Simulate\n            </ClayButton>\n          </div>\n        </div>\n        <div>\n          <div>\n            {\n              this.state.rv && \n                (<span><strong>Expected value: </strong> {this.state.rv.mean()}</span>)\n            }\n          </div>\n          <div>\n            {\n              (<><strong>Simulation average: </strong> {this.state.mean}</>)\n            }\n          </div>\n          <div>\n            {this.state.loading ? <ClayLoadingIndicator /> :\n            (\n              <ClayChart\n                data={{\n                  columns: [this.state.data],\n                  type: \"bar\"\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}