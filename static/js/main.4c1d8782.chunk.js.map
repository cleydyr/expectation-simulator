{"version":3,"sources":["functions/bernoulli.js","functions/hypergeometric.js","HypergeometricForm.js","functions/average.js","functions/binomial.js","BinomialForm.js","functions/geometric.js","GeometricForm.js","functions/negative_binomial.js","NegativeBinomialForm.js","index.js"],"names":["bernoulli","p","Math","random","Hypergeometric","constructor","successes","failures","sampleSize","this","trial","trials","Array","reduce","s","f","success","mean","gen","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","processEvent","event","Number","target","value","HyperGeometricForm","stateFn","_useState","useState","_useState2","Object","slicedToArray","setSuccesses","_useState3","_useState4","setFailures","_useState5","_useState6","setSampleSize","useEffect","HyperGeometric","react_default","createElement","form_lib_default","Group","htmlFor","form_lib","id","placeholder","type","onChange","formName","average","data","simulations","acc","cur","i","Binomial","map","__","BinomialForm","setP","step","Geometric","GeometricForm","NegativeBinomial","NegativeBinomialForm","distributions","App","React","Component","super","simulate","_this$state","state","rv_generator","rv","setState","objectSpread2","loading","filledData","v","changeParameters","[object Object]","changeDistribution","index","distributionIndex","DEFAULT_SIMULATIONS","render","_this$state2","form","className","inline","onSelectedValueChange","selectedValue","distribution","key","label","lib_default","onClick","resetFields","displayType","Fragment","charts_lib_default","columns","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.4c1d8782.chunk.js","sourcesContent":["export default function bernoulli(p) {\n  return Math.random() < p;\n}\n","import bernoulli from \"./bernoulli\";\n\nexport default class Hypergeometric {\n  constructor(successes, failures, sampleSize) {\n    this.successes = successes;\n    this.failures = failures;\n    this.sampleSize = sampleSize;\n  }  \n\n  trial = () => {\n    const trials = [...(new Array(this.sampleSize))]\n      .reduce(({s, f}) => {\n        const success = bernoulli(s/(s + f));\n\n        return {\n          s: s - success,\n          f: f - !success,\n        };\n      }, {s: this.successes, f: this.failures});\n\n    return this.successes - trials.s;\n  }\n\n  mean = () => this.sampleSize*this.successes/(this.successes + this.failures);\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport HyperGeometric from \"./functions/hypergeometric\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_FAILURES = 50;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst HyperGeometricForm = ({stateFn}) => {\n  const [successes, setSuccesses] = useState(DEFAULT_SUCCESSES);\n  const [failures, setFailures] = useState(DEFAULT_FAILURES);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  useEffect(() => {\n    stateFn(new HyperGeometric(successes, failures, sampleSize));\n  }, [successes, failures, sampleSize,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes here\"\n        type=\"number\"\n        onChange={processEvent(setSuccesses)}\n        value={successes}\n      />\n      <label htmlFor=\"failures\">Failures</label>\n      <ClayInput\n        id=\"failures\"\n        placeholder=\"Insert the number of failures here\"\n        type=\"number\"\n        onChange={processEvent(setFailures)}\n        value={failures}\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n    </ClayForm.Group>\n  );\n};\n\nHyperGeometricForm.formName = 'Hypergeometric';\n\nexport default HyperGeometricForm;\n","export default function average(data, simulations) {\n    return data.reduce((acc, cur, i) => {\n        return acc + i*cur/simulations;\n    }, 0);\n}","import bernoulli from \"./bernoulli\";\n\nexport default class Binomial {\n  constructor(p, sampleSize) {\n    this.p = p;\n    this.sampleSize = sampleSize;\n  }\n\n  trial = () => {\n    return [...(new Array(this.sampleSize))]\n        .map(__ => bernoulli(this.p))\n        .reduce((acc, cur) => acc + cur, 0);\n  }\n\n  mean = () => this.sampleSize*this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport Binomial from \"./functions/binomial\";\n\nconst DEFAULT_P = 0.5;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst BinomialForm = ({stateFn}) => {\n  const [p, setP] = useState(DEFAULT_P);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  useEffect(() => {\n    stateFn(new Binomial(p, sampleSize));\n  }, [p, sampleSize,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n    </ClayForm.Group>\n  );\n};\n\nBinomialForm.formName = 'Binomial';\n\nexport default BinomialForm;\n","import bernoulli from \"./bernoulli\";\n\nexport default class Geometric {\n  constructor(p) {\n    this.p = p;\n  }  \n\n  trial = () => {\n    var failures = 0;\n\n    while (!bernoulli(this.p)) {\n        failures++;\n    }\n\n    return failures;\n  }\n\n  mean = () => (1 - this.p)/this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport Geometric from \"./functions/geometric\";\n\nconst DEFAULT_P = 0.5;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst GeometricForm = ({stateFn}) => {\n  const [p, setP] = useState(DEFAULT_P);\n\n  useEffect(() => {\n    stateFn(new Geometric(p));\n  }, [p, ]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n      />\n    </ClayForm.Group>\n  );\n};\n\nGeometricForm.formName = 'Geometric';\n\nexport default GeometricForm;\n","import bernoulli from \"./bernoulli\";\n\nexport default class NegativeBinomial {\n  constructor(successes, failures) {\n    this.successes = successes;\n    this.failures = failures;\n  }  \n\n  trial = () => {\n    var f = this.failures;\n\n    while (!bernoulli(this.successes/(this.successes + f))) {\n        f--;\n    }\n\n    return this.failures - f;\n  }\n\n  mean = () => (1 - this.p)/this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport NegativeBinomial from \"./functions/negative_binomial\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_FAILURES = 50;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst NegativeBinomialForm = ({stateFn}) => {\n  const [successes, setSuccesses] = useState(DEFAULT_SUCCESSES);\n  const [failures, setFailures] = useState(DEFAULT_FAILURES);\n\n  useEffect(() => {\n    stateFn(new NegativeBinomial(successes, failures));\n  }, [successes, failures,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes here\"\n        type=\"number\"\n        onChange={processEvent(setSuccesses)}\n        value={successes}\n      />\n      <label htmlFor=\"failures\">Failures</label>\n      <ClayInput\n        id=\"failures\"\n        placeholder=\"Insert the number of failures here\"\n        type=\"number\"\n        onChange={processEvent(setFailures)}\n        value={failures}\n      />\n    </ClayForm.Group>\n  );\n};\n\nNegativeBinomialForm.formName = 'Negative Binomial';\n\nexport default NegativeBinomialForm;\n","import ClayButton from \"@clayui/button\";\nimport ClayChart from \"@clayui/charts\";\nimport { ClayInput } from \"@clayui/form\";\nimport {ClayRadio, ClayRadioGroup} from '@clayui/form';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Imports the @clayui/css package CSS\nimport \"@clayui/css/lib/css/atlas.css\";\n\nimport HyperGeometricForm from \"./HypergeometricForm\";\nimport average from \"./functions/average\";\nimport BinomialForm from \"./BinomialForm\";\nimport GeometricForm from \"./GeometricForm\";\nimport NegativeBinomialForm from \"./NegativeBinomialForm\";\n\nconst distributions = [\n  HyperGeometricForm,\n  BinomialForm,\n  GeometricForm,\n  NegativeBinomialForm,\n];\n\nclass App extends React.Component {\n  static DEFAULT_SIMULATIONS = 1000;\n\n  constructor() {\n    super();\n\n    this.state = {\n      simulations: App.DEFAULT_SIMULATIONS,\n      data: [\"data\"],\n      distributionIndex: 0,\n      loading: false,\n    };\n  }\n\n  simulate = () => {\n    const { simulations, rv } = this.state;\n\n    const rv_generator = rv.gen();\n\n    this.setState(\n      {\n        ...this.state,\n        loading: true,\n      },\n      () => {\n        const experiment = [...new Array(simulations)]\n          .map(__ => rv_generator.next().value)\n          .reduce((acc, cur) => {\n            acc[cur] = (acc[cur] || 0) + 1;\n\n            return acc;\n          }, []);\n\n        const filledData = [...experiment].map(v => v || 0);\n\n        this.setState({\n          ...this.state,\n          data: [\"data\", ...filledData],\n          mean: average(filledData, simulations),\n          loading: false,\n        });\n      });\n  };\n\n  changeParameters = (event) => {\n    this.setState({\n      ...this.state,\n      [event.target.id]: Number(event.target.value)\n    });\n  };\n\n  changeDistribution = (index) => {\n    this.setState({\n      distributionIndex: index,\n    });\n  }\n\n  render() {\n    const {\n      distributionIndex,\n      simulations,\n      rv,\n      mean,\n      data,\n    } = this.state;\n\n    const form = distributions[distributionIndex];\n\n    return (\n      <div className=\"container\">\n        <div className=\"sheet sheet-lg\">\n          <div className=\"sheet-header\">\n            <div className=\"sheet-title\">\n              {form.formName}\n            </div>\n          </div>\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Distribution</h3>\n            <ClayRadioGroup\n              inline\n              id=\"distribution\"\n              onSelectedValueChange={this.changeDistribution}\n              selectedValue={distributionIndex}\n            >\n              {distributions.map((distribution, i) => <ClayRadio key={i} label={distribution.formName} value={i} />)}\n            </ClayRadioGroup>\n          </div>\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Parameters</h3>\n            {\n              React.createElement(\n                form,\n                {\n                  stateFn: (rv) => this.setState((state) => ({rv})),\n                }\n              )\n            }\n          </div>\n          <label htmlFor=\"simulations\">Number of simulations</label>\n          <ClayInput\n            id=\"simulations\"\n            placeholder=\"Insert the number of simulations here\"\n            type=\"number\"\n            onChange={this.changeParameters}\n            value={simulations}\n          />\n          <div className=\"sheet-footer\">\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.resetFields} displayType=\"secondary\">\n                Reset\n              </ClayButton>\n            </div>\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.simulate} displayType=\"primary\">\n                Simulate\n              </ClayButton>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div>\n            {\n              rv && (<span><strong>Expected value: </strong> {rv.mean()}</span>)\n            }\n          </div>\n          <div>\n            {\n              (<><strong>Simulation average: </strong> {mean}</>)\n            }\n          </div>\n          <div>\n            {\n            (\n              <ClayChart\n                data={{\n                  columns: [data],\n                  type: \"bar\"\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}