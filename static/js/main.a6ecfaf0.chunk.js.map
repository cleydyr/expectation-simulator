{"version":3,"sources":["functions/bernoulli.js","functions/hypergeometric.js","HypergeometricForm.js","functions/average.js","functions/binomial.js","BinomialForm.js","index.js"],"names":["bernoulli","p","Math","random","Hypergeometric","constructor","successes","failures","sampleSize","this","trial","trials","Array","reduce","s","f","success","mean","gen","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","processEvent","event","Number","target","value","HyperGeometricForm","stateFn","_useState","useState","_useState2","Object","slicedToArray","setSuccesses","_useState3","_useState4","setFailures","_useState5","_useState6","setSampleSize","useEffect","HyperGeometric","react_default","createElement","form_lib_default","Group","htmlFor","form_lib","id","placeholder","type","onChange","formName","average","data","simulations","acc","cur","i","Binomial","map","__","BinomialForm","setP","step","distributions","App","React","Component","super","simulate","_this$state","state","rv_generator","rv","setState","objectSpread2","loading","filledData","v","changeParameters","[object Object]","changeDistribution","index","distributionIndex","DEFAULT_SIMULATIONS","render","_this$state2","form","className","inline","onSelectedValueChange","selectedValue","distribution","key","label","lib_default","onClick","resetFields","displayType","Fragment","charts_lib_default","columns","rootElement","document","getElementById","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.a6ecfaf0.chunk.js","sourcesContent":["export default function bernoulli(p) {\n  return Math.random() < p;\n}\n","import bernoulli from \"./bernoulli\";\n\nexport default class Hypergeometric {\n  constructor(successes, failures, sampleSize) {\n    this.successes = successes;\n    this.failures = failures;\n    this.sampleSize = sampleSize;\n  }  \n\n  trial = () => {\n    const trials = [...(new Array(this.sampleSize))]\n      .reduce(({s, f}) => {\n        const success = bernoulli(s/(s + f));\n\n        return {\n          s: s - success,\n          f: f - !success,\n        };\n      }, {s: this.successes, f: this.failures});\n\n    return this.successes - trials.s;\n  }\n\n  mean = () => this.sampleSize*this.successes/(this.successes + this.failures);\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport HyperGeometric from \"./functions/hypergeometric\";\n\nconst DEFAULT_SUCCESSES = 30;\nconst DEFAULT_FAILURES = 50;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst HyperGeometricForm = ({stateFn}) => {\n  const [successes, setSuccesses] = useState(DEFAULT_SUCCESSES);\n  const [failures, setFailures] = useState(DEFAULT_FAILURES);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  useEffect(() => {\n    stateFn(new HyperGeometric(successes, failures, sampleSize));\n  }, [successes, failures, sampleSize,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"successes\">Successes</label>\n      <ClayInput\n        id=\"successes\"\n        placeholder=\"Insert the number of successes here\"\n        type=\"number\"\n        onChange={processEvent(setSuccesses)}\n        value={successes}\n      />\n      <label htmlFor=\"failures\">Failures</label>\n      <ClayInput\n        id=\"failures\"\n        placeholder=\"Insert the number of failures here\"\n        type=\"number\"\n        onChange={processEvent(setFailures)}\n        value={failures}\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n    </ClayForm.Group>\n  );\n};\n\nHyperGeometricForm.formName = 'Hypergeometric';\n\nexport default HyperGeometricForm;\n","export default function average(data, simulations) {\n    return data.reduce((acc, cur, i) => {\n        return acc + i*cur/simulations;\n    }, 0);\n}","import bernoulli from \"./bernoulli\";\n\nexport default class Binomial {\n  constructor(p, sampleSize) {\n    this.p = p;\n    this.sampleSize = sampleSize;\n  }\n\n  trial = () => {\n    return [...(new Array(this.sampleSize))]\n        .map(__ => bernoulli(this.p))\n        .reduce((acc, cur) => acc + cur, 0);\n  }\n\n  mean = () => this.sampleSize*this.p;\n\n  gen = function*() {\n    while (true) {\n      yield this.trial();\n    }\n  }\n}\n","import ClayForm, { ClayInput } from \"@clayui/form\";\nimport React, { useState, useEffect } from \"react\";\nimport Binomial from \"./functions/binomial\";\n\nconst DEFAULT_P = 0.5;\nconst DEFAULT_SAMPLE_SIZE = 40;\n\nconst processEvent = f => event => f(Number(event.target.value));\n\nconst BinomialForm = ({stateFn}) => {\n  const [p, setP] = useState(DEFAULT_P);\n  const [sampleSize, setSampleSize] = useState(DEFAULT_SAMPLE_SIZE);\n\n  useEffect(() => {\n    stateFn(new Binomial(p, sampleSize));\n  }, [p, sampleSize,]);\n\n  return (\n    <ClayForm.Group>\n      <label htmlFor=\"p\">p</label>\n      <ClayInput\n        id=\"p\"\n        placeholder=\"Insert the probability of success here\"\n        type=\"number\"\n        step=\"0.05\"\n        onChange={processEvent(setP)}\n        value={p}\n      />\n      <label htmlFor=\"sampleSize\">Sample size</label>\n      <ClayInput\n        id=\"sampleSize\"\n        placeholder=\"Insert the sample size here\"\n        type=\"number\"\n        onChange={processEvent(setSampleSize)}\n        value={sampleSize}\n      />\n    </ClayForm.Group>\n  );\n};\n\nBinomialForm.formName = 'Binomial';\n\nexport default BinomialForm;\n","import ClayButton from \"@clayui/button\";\nimport ClayChart from \"@clayui/charts\";\nimport { ClayInput } from \"@clayui/form\";\nimport {ClayRadio, ClayRadioGroup} from '@clayui/form';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Imports the @clayui/css package CSS\nimport \"@clayui/css/lib/css/atlas.css\";\n\nimport HyperGeometricForm from \"./HypergeometricForm\";\nimport average from \"./functions/average\";\nimport BinomialForm from \"./BinomialForm\";\n\nconst distributions = [\n  HyperGeometricForm,\n  BinomialForm,\n];\n\nclass App extends React.Component {\n  static DEFAULT_SIMULATIONS = 1000;\n\n  constructor() {\n    super();\n\n    this.state = {\n      simulations: App.DEFAULT_SIMULATIONS,\n      data: [\"data\"],\n      distributionIndex: 0,\n      loading: false,\n    };\n  }\n\n  simulate = () => {\n    const { simulations, rv } = this.state;\n\n    const rv_generator = rv.gen();\n\n    this.setState(\n      {\n        ...this.state,\n        loading: true,\n      },\n      () => {\n        const experiment = [...new Array(simulations)]\n          .map(__ => rv_generator.next().value)\n          .reduce((acc, cur) => {\n            acc[cur] = (acc[cur] || 0) + 1;\n\n            return acc;\n          }, []);\n\n        const filledData = [...experiment].map(v => v || 0);\n\n        this.setState({\n          ...this.state,\n          data: [\"data\", ...filledData],\n          mean: average(filledData, simulations),\n          loading: false,\n        });\n      });\n  };\n\n  changeParameters = (event) => {\n    this.setState({\n      ...this.state,\n      [event.target.id]: Number(event.target.value)\n    });\n  };\n\n  changeDistribution = (index) => {\n    this.setState({\n      distributionIndex: index,\n    });\n  }\n\n  render() {\n    const {\n      distributionIndex,\n      simulations,\n      rv,\n      mean,\n      data,\n    } = this.state;\n\n    const form = distributions[distributionIndex];\n\n    return (\n      <div className=\"container\">\n        <div className=\"sheet sheet-lg\">\n          <div className=\"sheet-header\">\n            <div className=\"sheet-title\">\n              {form.formName}\n            </div>\n          </div>\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Distribution</h3>\n            <ClayRadioGroup\n              inline\n              id=\"distribution\"\n              onSelectedValueChange={this.changeDistribution}\n              selectedValue={distributionIndex}\n            >\n              {distributions.map((distribution, i) => <ClayRadio key={i} label={distribution.formName} value={i} />)}\n            </ClayRadioGroup>\n          </div>\n          <div className=\"sheet-section\">\n            <h3 className=\"sheet-subtitle\">Parameters</h3>\n            {\n              React.createElement(\n                form,\n                {\n                  stateFn: (rv) => this.setState((state) => ({rv})),\n                }\n              )\n            }\n          </div>\n          <label htmlFor=\"simulations\">Number of simulations</label>\n          <ClayInput\n            id=\"simulations\"\n            placeholder=\"Insert the number of simulations here\"\n            type=\"number\"\n            onChange={this.changeParameters}\n            value={simulations}\n          />\n          <div className=\"sheet-footer\">\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.resetFields} displayType=\"secondary\">\n                Reset\n              </ClayButton>\n            </div>\n            <div className=\"btn-group-item\">\n              <ClayButton onClick={this.simulate} displayType=\"primary\">\n                Simulate\n              </ClayButton>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div>\n            {\n              rv && (<span><strong>Expected value: </strong> {rv.mean()}</span>)\n            }\n          </div>\n          <div>\n            {\n              (<><strong>Simulation average: </strong> {mean}</>)\n            }\n          </div>\n          <div>\n            {\n            (\n              <ClayChart\n                data={{\n                  columns: [data],\n                  type: \"bar\"\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}